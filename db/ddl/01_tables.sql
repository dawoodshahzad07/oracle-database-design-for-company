-- Tables: Department, Location, Project, Employee, Department_Manager, Dependent,
-- Works_On, Customer, Product, Warehouse, Inventory, Sales_Order, Order_Item

-- Department
CREATE TABLE department (
  department_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name          VARCHAR2(100) NOT NULL UNIQUE,
  created_at    TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Location (belongs to exactly one Department)
CREATE TABLE location (
  location_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  department_id NUMBER NOT NULL,
  address_line  VARCHAR2(200) NOT NULL,
  city          VARCHAR2(100) NOT NULL,
  postcode      VARCHAR2(20),
  country       VARCHAR2(100) DEFAULT 'UK' NOT NULL,
  CONSTRAINT fk_location_department FOREIGN KEY (department_id)
    REFERENCES department(department_id)
);

-- Project (controlled by one Department; has one Location)
CREATE TABLE project (
  project_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  department_id NUMBER NOT NULL,
  location_id   NUMBER NOT NULL,
  name          VARCHAR2(150) NOT NULL,
  start_date    DATE,
  end_date      DATE,
  CONSTRAINT fk_project_department FOREIGN KEY (department_id)
    REFERENCES department(department_id),
  CONSTRAINT fk_project_location FOREIGN KEY (location_id)
    REFERENCES location(location_id),
  CONSTRAINT chk_project_dates CHECK (end_date IS NULL OR end_date > start_date)
);

-- Employee (assigned to exactly one Department; has at most one supervisor)
CREATE TABLE employee (
  employee_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ni_number     VARCHAR2(20) NOT NULL UNIQUE,
  first_name    VARCHAR2(100) NOT NULL,
  last_name     VARCHAR2(100) NOT NULL,
  address_line  VARCHAR2(200),
  city          VARCHAR2(100),
  postcode      VARCHAR2(20),
  email         VARCHAR2(150) UNIQUE,
  phone         VARCHAR2(30),
  salary        NUMBER(12,2) DEFAULT 0 NOT NULL,
  date_of_birth DATE NOT NULL,
  start_date    DATE NOT NULL,
  leaving_date  DATE,
  department_id NUMBER NOT NULL,
  supervisor_id NUMBER,
  CONSTRAINT fk_employee_department FOREIGN KEY (department_id)
    REFERENCES department(department_id),
  CONSTRAINT fk_employee_supervisor FOREIGN KEY (supervisor_id)
    REFERENCES employee(employee_id),
  CONSTRAINT chk_employee_dates CHECK (leaving_date IS NULL OR leaving_date > start_date),
  CONSTRAINT chk_employee_salary CHECK (salary >= 0)
);

-- Department Manager (history with start/end dates)
CREATE TABLE department_manager (
  department_id NUMBER NOT NULL,
  employee_id   NUMBER NOT NULL,
  start_date    DATE NOT NULL,
  end_date      DATE,
  CONSTRAINT pk_department_manager PRIMARY KEY (department_id, employee_id, start_date),
  CONSTRAINT fk_dm_department FOREIGN KEY (department_id) REFERENCES department(department_id),
  CONSTRAINT fk_dm_employee FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
  CONSTRAINT chk_dm_dates CHECK (end_date IS NULL OR end_date > start_date)
);

-- Dependent (for employee insurance)
CREATE TABLE dependent (
  dependent_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id   NUMBER NOT NULL,
  first_name    VARCHAR2(100) NOT NULL,
  date_of_birth DATE NOT NULL,
  relationship  VARCHAR2(50) NOT NULL,
  CONSTRAINT fk_dependent_employee FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

-- Works_On (N-M between Employee and Project, with weekly hours)
CREATE TABLE works_on (
  employee_id   NUMBER NOT NULL,
  project_id    NUMBER NOT NULL,
  hours_per_week NUMBER(5,2) DEFAULT 0 NOT NULL,
  CONSTRAINT pk_works_on PRIMARY KEY (employee_id, project_id),
  CONSTRAINT fk_wo_employee FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
  CONSTRAINT fk_wo_project FOREIGN KEY (project_id) REFERENCES project(project_id),
  CONSTRAINT chk_hours CHECK (hours_per_week >= 0 AND hours_per_week <= 60)
);

-- Product
CREATE TABLE product (
  product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sku        VARCHAR2(50) NOT NULL UNIQUE,
  name       VARCHAR2(150) NOT NULL,
  unit_price NUMBER(12,2) NOT NULL,
  CONSTRAINT chk_product_price CHECK (unit_price >= 0)
);

-- Warehouse
CREATE TABLE warehouse (
  warehouse_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         VARCHAR2(100) NOT NULL UNIQUE,
  address_line VARCHAR2(200),
  city         VARCHAR2(100),
  postcode     VARCHAR2(20),
  country      VARCHAR2(100) DEFAULT 'UK' NOT NULL
);

-- Inventory (quantity per product per warehouse)
CREATE TABLE inventory (
  warehouse_id NUMBER NOT NULL,
  product_id   NUMBER NOT NULL,
  quantity     NUMBER(12,2) DEFAULT 0 NOT NULL,
  CONSTRAINT pk_inventory PRIMARY KEY (warehouse_id, product_id),
  CONSTRAINT fk_inv_wh FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id),
  CONSTRAINT fk_inv_product FOREIGN KEY (product_id) REFERENCES product(product_id),
  CONSTRAINT chk_inv_qty CHECK (quantity >= 0)
);

-- Customer (each has one salesperson)
CREATE TABLE customer (
  customer_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name           VARCHAR2(150) NOT NULL,
  email          VARCHAR2(150),
  phone          VARCHAR2(30),
  salesperson_id NUMBER NOT NULL,
  CONSTRAINT fk_customer_salesperson FOREIGN KEY (salesperson_id) REFERENCES employee(employee_id)
);

-- Sales Order (avoid reserved word ORDER)
CREATE TABLE sales_order (
  order_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id NUMBER NOT NULL,
  order_date  DATE DEFAULT SYSDATE NOT NULL,
  CONSTRAINT fk_order_customer FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);

-- Order Item
CREATE TABLE order_item (
  order_id   NUMBER NOT NULL,
  product_id NUMBER NOT NULL,
  quantity   NUMBER(10,2) NOT NULL,
  unit_price NUMBER(12,2) NOT NULL,
  CONSTRAINT pk_order_item PRIMARY KEY (order_id, product_id),
  CONSTRAINT fk_oi_order FOREIGN KEY (order_id) REFERENCES sales_order(order_id) ON DELETE CASCADE,
  CONSTRAINT fk_oi_product FOREIGN KEY (product_id) REFERENCES product(product_id),
  CONSTRAINT chk_oi_qty CHECK (quantity > 0),
  CONSTRAINT chk_oi_price CHECK (unit_price >= 0)
);

-- Helpful indexes on common FK joins
CREATE INDEX ix_location_department ON location(department_id);
CREATE INDEX ix_project_department ON project(department_id);
CREATE INDEX ix_project_location ON project(location_id);
CREATE INDEX ix_employee_department ON employee(department_id);
CREATE INDEX ix_employee_supervisor ON employee(supervisor_id);
CREATE INDEX ix_wo_employee ON works_on(employee_id);
CREATE INDEX ix_wo_project ON works_on(project_id);
CREATE INDEX ix_inv_wh ON inventory(warehouse_id);
CREATE INDEX ix_inv_product ON inventory(product_id);
CREATE INDEX ix_customer_salesperson ON customer(salesperson_id);
CREATE INDEX ix_order_customer ON sales_order(customer_id);
CREATE INDEX ix_oi_product ON order_item(product_id); 